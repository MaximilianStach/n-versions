Notes based on: "N-VERSION PROGRAMMING : A FAULT-TOLERANCE APPROACH TO RELIABILITY OF SOFTWARE OPERATION" by Liming Chen and Algirdas Avizienis

N-Version Programming = independent generation of >= 2 functionally equivalent programs (called versions) from the same initial specification


3 Assumptions of difficulties:
    - Difficult to construct error-free software
    - Software unlikely to perform complete self-chechikng on its own outputs
    - Difficult to perform run-time diagnosis of software in order to locate the source of a software error  
    
 -> Conclusion -> Redundant software shoudl try to meet the following constrainst:
    - It does not require complete self-checking
    - It does not rely upon run-time software diagnosis
    - It must contain independently developed alternative routines for the same functions
    
    
2 distinc approaches have been investigated;
    - Recovery blocks: Organized like dynamic redundancy (stand-by-sparing) technique in hardware.
        Run-time software error detection and error recovery via alternate path of operation
        -Stand-by-sparing:
          - only one module is driving outputs
          - other modules are
            - idle   =>   hot spares
            - shut down  => cold spares
          - error detection  => switch to a new module
          - hot spares
            - no power-up delays
            - power consumption
          - cold spares
            - opposite of hot spares
    - Software redundancy analogously to the static  (replication and voting) redundancy approach in hardware.
        - 1975: Experimental research project "N-Version programming" at UCLA to test this approach 
        
        
Concepts of N-Version Programming:
    - N >= 2 functionally equivalend programs (called versions) from the same initial specification
    - Programming efforts carried out by N individuals or groups that do not interact with respect to the programming process
    - Whenever possible different algorithms and programming languages or translators are used
    - Initial specification is a formal specification in a specification language of the functional requirements
        - In detail:
            1. the function to be implemented
            2. data formats for the special mechanisms: comparison vecotrs ("c-vectors") and synchonization mechanisms
            3. the cross-check points ("cc-points") for c-vector generation
            4. the comparison (matching or voting) algorithm
            5. the response to the possible outcomes of matching (N = 2) or voting (N > 2)
    - The versions form an N-version software unit
    - Performance of each version must satisfy aome acceptance criteria before it can be integrated into the program
    -> Acceptance program to test a version
    - Supervisory program (Driver) to drive an N-version software unit (includes voting/matching
    - N-version program = Set of N-version software unit and its driver
    
3 types of special mechanisms needed:
    - cross-check (cc-) points mark the points at which c-vectors are generated and used for comparison
    1. comparison (c-) vectors
        - subset of version's local porgram
        - interpretable by the driver
        - comparison variables to be matched and status flags as indicators of occurred events (ex.: end-of-file, exception conditions)
        - results can pe acceptable or it's adisagreeing version
    2. comparison status (cs-) indicators
        - indicate actions to be taken after comparison at a cc-point
        - actions to be taken depend on:
            1. whether all versions deliver the c-vectors withing specified time
            2. whether the c-vectors agree or disagree
        - possible outcomes:
            1. continuation
            2. termination of one ore more versions
            3. continuation after changes in the c-vectors of one or more versions base on majority decision
    3. synchronization mechanisms
        - synchonize execution steps
        - each version uses it to signal the driver that a c-vector is ready
        - prevents comparison before all c-vectors are ready
        - version initialized as INACTIVE -> invoked through driver signal (WAITING) -> request for service signal activates it (RUNNING)
        - if cs-indicators contain terminating conditions then the version is terminated and goes bock to INACTIVE
        - otherwise it creates c-vectors at the next cc-point, signals the drive the readyness of the c-vector and returns to WAITING
        
Observations:
    - N-version approach limited by the initial specification
    - Initial specification has to be correct, complete and unambiguos
    - The idea is that formal correctness proofs or exhaustive validations of initial specifications in formal specification language are
        much more likely to succeed within acceptable cost bounds than proofs or validation of the actual implementations.
    - Success as a method of runtime tolerance depends on whether the residual software fualts in each version are distinguishable
        - distinguishable software faults: faults that will cause a disagreement between c-vectors at the specified cc-points 
        - distinguishability is affected by the choice of c-vectors and cc-points.
    - Conjecture that independent programming efforts greatly reduce the propability of identical software defect in two or more versions
    - Goal: Tolerance of software faults
    
UCLA addesses 2 so far unansweted questions:
    1. Which constraints (nature of the targeted problem) have to be satisfied to make N-version programming feasible at all regardless of the cost?
    2. How does the cost-effectiveness of the N-version programming approach compare to the two alternatives:
        1. non-redundant ("fault intolerant") programming
        2. "recovery block" approach
        
Comparison with recovery block approach:
    - Newly developed modules -> old ones can be used as alternative -> lower production cost
    - Memory overhead in case of neseted recovery block structures, system state must be saved 
    - Intermediate output from block may not be reversible in a real-time environment
    - Procedure to verify results from the execution of the program can be as complex as the program itself (look at sorting problems-> have to check order, identity of elements)
        -> In most cases only "reasonableness" rather than "correctness" may be checked for by acceptance tests.
    - N-versions: Self checking not required, possible to have no delay in case of fault
    
Adaptive voting: with weights R = W1 x R1 + W2 x R2 + W3 x R3
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
